
function [ aberrations, pupil_retina_distances ] = ...
    compute_aberrations_parametric( ...
        name, pd, ml, alpha, nrays, max_deg, max_time, anat_boundary, anat_average, ...
        functional_specified, functional_unspecified,  ...
        optimizer, solver, ...
        angles_hor, angles_vert, lambdas, pupil_diams, focus_distances, ...
        varargin )

    % get the eye that satisfies our input parameters
    eye_map = EyeDatabase( );
    eye_entry = eye_map.GetReconstructed( ...
        name, pd, ml, nrays, max_deg, max_time, ...
        anat_boundary, anat_average, ...
        functional_specified, functional_unspecified, alpha, ...
        optimizer, solver );
    
    % get the eye that satisfies our input parameters
    aberration_map = AberrationDatabase( );
    aberration_entry = aberration_map.Get( eye_entry, ...
        nrays, max_deg, angles_hor, angles_vert, ...
        lambdas, pupil_diams, focus_distances, ...
        varargin{:} );
    
    % write out the results
    aberrations = aberration_entry.opd;
    pupil_retina_distances = aberration_entry.pupil_retina_distances;
end