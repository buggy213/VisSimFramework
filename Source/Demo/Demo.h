////////////////////////////////////////////////////////////////////////////////
//  Headers
////////////////////////////////////////////////////////////////////////////////

#include "Core/Includes.h"
#include "Scene/Includes.h"

////////////////////////////////////////////////////////////////////////////////
//  MAIN DEMO
////////////////////////////////////////////////////////////////////////////////

namespace Demo
{
	////////////////////////////////////////////////////////////////////////////////
	/** The main scene. */
	extern Scene::Scene g_scene;

	////////////////////////////////////////////////////////////////////////////////
	/** Demo scene descriptor. */
	struct DemoScene
	{
		using Initializer = void(*)(Scene::Scene& scene);

		std::string m_name;
		std::string m_groupName;
		Initializer m_initializer;
	};

	////////////////////////////////////////////////////////////////////////////////
	using DemoScenes = std::vector<DemoScene>;
	DemoScenes& demoScenes();

	////////////////////////////////////////////////////////////////////////////////
	#define REGISTER_DEMO_SCENE() \
		Demo::demoScenes().push_back({ SCENE_NAME, OBJECT_GROUP_NAME, initDemoScene })

	////////////////////////////////////////////////////////////////////////////////
	void mainLoop();

	////////////////////////////////////////////////////////////////////////////////
	void init();

	////////////////////////////////////////////////////////////////////////////////
	void cleanup();

	////////////////////////////////////////////////////////////////////////////////
	// Common settings for cameras
	void commonCameraProperties(Scene::Scene& scene, Scene::Object& object, bool locked);
}