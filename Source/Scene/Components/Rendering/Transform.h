#pragma once

////////////////////////////////////////////////////////////////////////////////
//  Headers
////////////////////////////////////////////////////////////////////////////////

#include "PCH.h"
#include "Common.h"

namespace Transform
{
	////////////////////////////////////////////////////////////////////////////////
	/** Component and display name. */
	static constexpr const char* COMPONENT_NAME = "Transform";
	static constexpr const char* DISPLAY_NAME = "Actor";
	static constexpr const char* CATEGORY = "Actor";

	////////////////////////////////////////////////////////////////////////////////
	/** Transformation component. */
	struct TransformComponent
	{
		// Position of the object
		glm::vec3 m_position{ 0.0f };

		// Size of the object
		glm::vec3 m_scale{ 1.0f };

		// Orientation of the object
		glm::vec3 m_orientation{ 0.0f };

		// Whether the transformation changed since the previous frame or not
		bool m_transformChanged = true;

		// ---- Private members

		// Position of the object
		glm::vec3 m_prevPosition{ 0.0f };

		// Size of the object
		glm::vec3 m_prevScale{ 1.0f };

		// Orientation of the object
		glm::vec3 m_prevOrientation{ 0.0f };
	};

	////////////////////////////////////////////////////////////////////////////////
	void updateObject(Scene::Scene& scene, Scene::Object* simulationSettings, Scene::Object* object);

	////////////////////////////////////////////////////////////////////////////////
	bool generateGui(Scene::Scene& scene, Scene::Object* guiSettings, Scene::Object* object);

	////////////////////////////////////////////////////////////////////////////////
	glm::vec3 lookAt(Scene::Object* object, glm::vec3 at);

	////////////////////////////////////////////////////////////////////////////////
	glm::mat4 getModelMatrix(glm::vec3 pos, glm::vec3 orientation, glm::vec3 scale);

	////////////////////////////////////////////////////////////////////////////////
	glm::mat4 getModelMatrix(Scene::Object* object);

	////////////////////////////////////////////////////////////////////////////////
	glm::mat4 getPrevModelMatrix(Scene::Object* object);

	////////////////////////////////////////////////////////////////////////////////
	glm::mat4 getNormalMatrix(glm::mat4 const& matrix);

	////////////////////////////////////////////////////////////////////////////////
	glm::mat4 getNormalMatrix(Scene::Object* object);

	////////////////////////////////////////////////////////////////////////////////
	glm::mat4 getPrevNormalMatrix(Scene::Object* object);

	////////////////////////////////////////////////////////////////////////////////
	glm::vec3 getForwardVector(glm::mat4 const& matrix);

	////////////////////////////////////////////////////////////////////////////////
	glm::vec3 getRightVector(glm::mat4 const& matrix);

	////////////////////////////////////////////////////////////////////////////////
	glm::vec3 getUpVector(glm::mat4 const& matrix);

	////////////////////////////////////////////////////////////////////////////////
	glm::vec3 getForwardVector(Scene::Object* object);

	////////////////////////////////////////////////////////////////////////////////
	glm::vec3 getRightVector(Scene::Object* object);

	////////////////////////////////////////////////////////////////////////////////
	glm::vec3 getUpVector(Scene::Object* object);

	////////////////////////////////////////////////////////////////////////////////
	glm::vec3 getPrevForwardVector(Scene::Object* object);

	////////////////////////////////////////////////////////////////////////////////
	glm::vec3 getPrevRightVector(Scene::Object* object);

	////////////////////////////////////////////////////////////////////////////////
	glm::vec3 getPrevUpVector(Scene::Object* object);
}

////////////////////////////////////////////////////////////////////////////////
// Component declaration
DECLARE_COMPONENT(TRANSFORM, TransformComponent, Transform::TransformComponent)
DECLARE_OBJECT(ACTOR, COMPONENT_ID_TRANSFORM, COMPONENT_ID_EDITOR_SETTINGS)